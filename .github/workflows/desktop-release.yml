name: Desktop Release

on:
  push:
    tags:
      - 'server-v*'

jobs:
  build-desktop:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            target: x86_64-apple-darwin
            arch: x64
          - platform: macos-latest
            target: aarch64-apple-darwin
            arch: arm64
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            arch: x64

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@1.90.0
        with:
          targets: ${{ matrix.target }}

      - name: Install dependencies (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          rustup target add ${{ matrix.target }}
          # Install OpenSSL for cross-compilation
          brew install openssl@3

      - name: Install OpenSSL (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          # Install OpenSSL via vcpkg
          echo "Installing OpenSSL via vcpkg..."
          vcpkg install openssl:x64-windows-static-md
          echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "OPENSSL_DIR=$env:VCPKG_INSTALLATION_ROOT\installed\x64-windows-static-md" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "OPENSSL_STATIC=1" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh

      - name: Build server binary
        shell: bash
        run: |
          cd server
          # Set OpenSSL paths for macOS cross-compilation
          if [ "${{ matrix.platform }}" = "macos-latest" ]; then
            export OPENSSL_DIR=$(brew --prefix openssl@3)
            export OPENSSL_LIB_DIR=$(brew --prefix openssl@3)/lib
            export OPENSSL_INCLUDE_DIR=$(brew --prefix openssl@3)/include
          fi
          cargo build --release --target ${{ matrix.target }}

      - name: Install Tauri CLI
        shell: bash
        run: |
          cargo install tauri-cli --version ^1.5

      - name: Build wrapper (macOS)
        if: matrix.platform == 'macos-latest'
        shell: bash
        run: |
          cd wrapper
          # Set OpenSSL paths for macOS cross-compilation
          export OPENSSL_DIR=$(brew --prefix openssl@3)
          export OPENSSL_LIB_DIR=$(brew --prefix openssl@3)/lib
          export OPENSSL_INCLUDE_DIR=$(brew --prefix openssl@3)/include
          cargo tauri build --target ${{ matrix.target }}

      - name: Build wrapper (Windows)
        if: matrix.platform == 'windows-latest'
        shell: bash
        run: |
          cd wrapper
          cargo tauri build --target ${{ matrix.target }}

      - name: Extract version from tag
        id: version
        shell: bash
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#server-v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "desktop_tag=desktop-v$VERSION" >> $GITHUB_OUTPUT

      - name: Debug bundle output
        shell: bash
        run: |
          echo "Checking bundle directory structure..."
          ls -la wrapper/src-tauri/target/${{ matrix.target }}/release/ || echo "Release directory not found"
          if [ -d "wrapper/src-tauri/target/${{ matrix.target }}/release/bundle" ]; then
            echo "Bundle directory contents:"
            ls -la wrapper/src-tauri/target/${{ matrix.target }}/release/bundle/
          else
            echo "Bundle directory not found"
          fi

      - name: Prepare artifacts (macOS)
        if: matrix.platform == 'macos-latest'
        shell: bash
        run: |
          ARTIFACTS_DIR="${GITHUB_WORKSPACE}/wrapper/src-tauri/target/artifacts"
          BUNDLE_DIR="${GITHUB_WORKSPACE}/wrapper/src-tauri/target/${{ matrix.target }}/release/bundle"

          mkdir -p "$ARTIFACTS_DIR"

          # Copy DMG if it exists
          if [ -d "$BUNDLE_DIR/dmg" ]; then
            echo "Found DMG bundle"
            ls -la "$BUNDLE_DIR/dmg/"
            cp "$BUNDLE_DIR/dmg"/*.dmg "$ARTIFACTS_DIR/Porua-${{ steps.version.outputs.version }}-${{ matrix.arch }}.dmg"
          else
            echo "Warning: DMG bundle not found"
          fi

          # Copy .app bundle if it exists
          if [ -d "$BUNDLE_DIR/macos" ]; then
            echo "Found macOS app bundle"
            ls -la "$BUNDLE_DIR/macos/"
            cd "$BUNDLE_DIR/macos"
            zip -r "$ARTIFACTS_DIR/Porua-${{ steps.version.outputs.version }}-${{ matrix.arch }}.app.zip" Porua.app
          else
            echo "Warning: macOS app bundle not found"
          fi

      - name: Prepare artifacts (Windows)
        if: matrix.platform == 'windows-latest'
        shell: bash
        run: |
          ARTIFACTS_DIR="${GITHUB_WORKSPACE}/wrapper/src-tauri/target/artifacts"
          BUNDLE_DIR="${GITHUB_WORKSPACE}/wrapper/src-tauri/target/${{ matrix.target }}/release/bundle"

          mkdir -p "$ARTIFACTS_DIR"

          # Copy MSI if it exists
          if [ -d "$BUNDLE_DIR/msi" ]; then
            echo "Found MSI installer"
            ls -la "$BUNDLE_DIR/msi/"
            cp "$BUNDLE_DIR/msi"/*.msi "$ARTIFACTS_DIR/Porua-${{ steps.version.outputs.version }}-windows-${{ matrix.arch }}.msi"
          else
            echo "Warning: MSI installer not found"
          fi

          # Copy NSIS installer if it exists
          if [ -d "$BUNDLE_DIR/nsis" ]; then
            echo "Found NSIS installer"
            ls -la "$BUNDLE_DIR/nsis/"
            cp "$BUNDLE_DIR/nsis"/*.exe "$ARTIFACTS_DIR/Porua-${{ steps.version.outputs.version }}-windows-${{ matrix.arch }}.exe"
          else
            echo "Warning: NSIS installer not found"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: porua-desktop-${{ matrix.platform }}-${{ matrix.arch }}
          path: wrapper/src-tauri/target/artifacts/*

  create-release:
    needs: build-desktop
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#server-v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "desktop_tag=desktop-v$VERSION" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create desktop release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.desktop_tag }}
          name: Porua Desktop ${{ steps.version.outputs.version }}
          body: |
            Desktop wrapper application for Porua TTS Server.

            ## Downloads

            ### macOS
            - **Apple Silicon (M1/M2/M3)**: `Porua-${{ steps.version.outputs.version }}-arm64.dmg` or `Porua-${{ steps.version.outputs.version }}-arm64.app.zip`
            - **Intel**: `Porua-${{ steps.version.outputs.version }}-x64.dmg` or `Porua-${{ steps.version.outputs.version }}-x64.app.zip`

            ### Windows
            - **64-bit MSI**: `Porua-${{ steps.version.outputs.version }}-windows-x64.msi`
            - **64-bit EXE**: `Porua-${{ steps.version.outputs.version }}-windows-x64.exe`

            ## Installation

            ### macOS
            1. Download the appropriate DMG file for your Mac
            2. Open the DMG file
            3. Drag Porua to your Applications folder
            4. Right-click and select "Open" on first launch (due to macOS security)

            Alternatively, download the .app.zip file, extract it, and move to Applications.

            ### Windows
            1. Download the MSI or EXE installer
            2. Run the installer
            3. Follow the installation prompts

            ---
            *Built from server release tag: `server-v${{ steps.version.outputs.version }}`*
          files: |
            artifacts/**/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
