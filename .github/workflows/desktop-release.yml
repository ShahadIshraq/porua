name: Desktop Release

on:
  push:
    tags:
      - 'server-v*'

jobs:
  build-desktop:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            target: x86_64-apple-darwin
            arch: x64
          - platform: macos-latest
            target: aarch64-apple-darwin
            arch: arm64
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            arch: x64

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@1.90.0
        with:
          targets: ${{ matrix.target }}

      - name: Install dependencies (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          rustup target add ${{ matrix.target }}
          # Install OpenSSL for cross-compilation
          brew install openssl@3

      - name: Install OpenSSL (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          # Install OpenSSL via vcpkg
          echo "Installing OpenSSL via vcpkg..."
          vcpkg install openssl:x64-windows-static-md
          echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "OPENSSL_DIR=$env:VCPKG_INSTALLATION_ROOT\installed\x64-windows-static-md" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "OPENSSL_STATIC=1" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh

      - name: Build server binary
        shell: bash
        run: |
          cd server
          # Set OpenSSL paths for macOS cross-compilation
          if [ "${{ matrix.platform }}" = "macos-latest" ]; then
            export OPENSSL_DIR=$(brew --prefix openssl@3)
            export OPENSSL_LIB_DIR=$(brew --prefix openssl@3)/lib
            export OPENSSL_INCLUDE_DIR=$(brew --prefix openssl@3)/include
          fi
          cargo build --release --target ${{ matrix.target }}

      - name: Sign server binary (macOS)
        if: matrix.platform == 'macos-latest'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
        shell: bash
        run: |
          echo "::group::Setting up signing keychain"

          # Create temporary keychain
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          KEYCHAIN_PASSWORD=$(openssl rand -base64 32)

          # Create and unlock keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          # Import certificate
          echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12
          security import certificate.p12 \
            -k "$KEYCHAIN_PATH" \
            -P "$APPLE_CERTIFICATE_PASSWORD" \
            -T /usr/bin/codesign \
            -T /usr/bin/security

          # Set key partition list to avoid UI prompts
          security set-key-partition-list \
            -S apple-tool:,apple:,codesign: \
            -s -k "$KEYCHAIN_PASSWORD" \
            "$KEYCHAIN_PATH"

          # Add keychain to search list
          security list-keychains -d user -s "$KEYCHAIN_PATH" $(security list-keychains -d user | sed s/\"//g)

          echo "✓ Keychain setup complete"
          echo "::endgroup::"

          echo "::group::Signing server binary"

          # Sign server binary
          codesign --force \
            --sign "$APPLE_SIGNING_IDENTITY" \
            --options runtime \
            --entitlements wrapper/src-tauri/Entitlements.plist \
            --timestamp \
            --verbose \
            server/target/${{ matrix.target }}/release/porua_server

          # Verify signature
          codesign --verify --verbose server/target/${{ matrix.target }}/release/porua_server
          echo "✓ Server binary signed successfully"

          echo "::endgroup::"

          # Copy signed binary to wrapper resources
          mkdir -p wrapper/resources
          cp server/target/${{ matrix.target }}/release/porua_server wrapper/resources/

          # Cleanup
          rm certificate.p12

      - name: Install Tauri CLI
        shell: bash
        run: |
          cargo install tauri-cli --version ^1.5

      - name: Build wrapper (macOS)
        if: matrix.platform == 'macos-latest'
        env:
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
        shell: bash
        run: |
          cd wrapper
          # Set OpenSSL paths for macOS cross-compilation
          export OPENSSL_DIR=$(brew --prefix openssl@3)
          export OPENSSL_LIB_DIR=$(brew --prefix openssl@3)/lib
          export OPENSSL_INCLUDE_DIR=$(brew --prefix openssl@3)/include
          cargo tauri build --target ${{ matrix.target }}

      - name: Build wrapper (Windows)
        if: matrix.platform == 'windows-latest'
        shell: bash
        run: |
          cd wrapper
          cargo tauri build --target ${{ matrix.target }}

      - name: Extract version from tag
        id: version
        shell: bash
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#server-v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "desktop_tag=desktop-v$VERSION" >> $GITHUB_OUTPUT

      - name: Debug bundle output
        shell: bash
        run: |
          echo "Checking bundle directory structure..."
          ls -la wrapper/src-tauri/target/${{ matrix.target }}/release/ || echo "Release directory not found"
          if [ -d "wrapper/src-tauri/target/${{ matrix.target }}/release/bundle" ]; then
            echo "Bundle directory contents:"
            ls -la wrapper/src-tauri/target/${{ matrix.target }}/release/bundle/
          else
            echo "Bundle directory not found"
          fi

      - name: Create custom DMG (macOS)
        if: matrix.platform == 'macos-latest'
        shell: bash
        run: |
          ARTIFACTS_DIR="${GITHUB_WORKSPACE}/wrapper/src-tauri/target/artifacts"
          BUNDLE_DIR="${GITHUB_WORKSPACE}/wrapper/src-tauri/target/${{ matrix.target }}/release/bundle"
          APP_BUNDLE="$BUNDLE_DIR/macos/Porua.app"

          mkdir -p "$ARTIFACTS_DIR"

          # Create custom DMG with background if .app bundle exists
          if [ -d "$APP_BUNDLE" ]; then
            echo "Found app bundle at: $APP_BUNDLE"
            echo "Creating custom DMG with background..."

            cd wrapper/src-tauri
            chmod +x create_custom_dmg.sh
            ./create_custom_dmg.sh \
              "$APP_BUNDLE" \
              "$ARTIFACTS_DIR/Porua-${{ steps.version.outputs.version }}-${{ matrix.arch }}.dmg" \
              "${{ steps.version.outputs.version }}"

            echo "✓ Custom DMG created"

            # Also create a .app.zip as alternative download
            echo "Creating .app.zip..."
            cd "$BUNDLE_DIR/macos"
            zip -qr "$ARTIFACTS_DIR/Porua-${{ steps.version.outputs.version }}-${{ matrix.arch }}.app.zip" Porua.app
            echo "✓ App bundle zip created"
          else
            echo "Error: App bundle not found at $APP_BUNDLE"
            exit 1
          fi

      - name: Notarize app bundle and DMG (macOS)
        if: matrix.platform == 'macos-latest'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        shell: bash
        run: |
          ARTIFACTS_DIR="${GITHUB_WORKSPACE}/wrapper/src-tauri/target/artifacts"
          BUNDLE_DIR="${GITHUB_WORKSPACE}/wrapper/src-tauri/target/${{ matrix.target }}/release/bundle"
          APP_BUNDLE="$BUNDLE_DIR/macos/Porua.app"
          DMG_FILE="$ARTIFACTS_DIR/Porua-${{ steps.version.outputs.version }}-${{ matrix.arch }}.dmg"

          echo "::group::Notarizing app bundle"

          # Create a ZIP for notarization (required format)
          cd "$BUNDLE_DIR/macos"
          zip -qr "$RUNNER_TEMP/Porua.zip" Porua.app

          # Submit for notarization
          echo "Submitting app bundle to Apple for notarization..."
          xcrun notarytool submit "$RUNNER_TEMP/Porua.zip" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait \
            --timeout 30m

          # Check notarization status
          if [ $? -eq 0 ]; then
            echo "✓ App bundle notarization successful"

            # Staple the notarization ticket to the app
            echo "Stapling notarization ticket to app bundle..."
            xcrun stapler staple "$APP_BUNDLE"

            # Verify stapling
            xcrun stapler validate "$APP_BUNDLE"
          else
            echo "✗ App bundle notarization failed"
            exit 1
          fi

          echo "::endgroup::"

          echo "::group::Notarizing DMG"

          # Recreate DMG with notarized app
          rm -f "$DMG_FILE"
          cd "${GITHUB_WORKSPACE}/wrapper/src-tauri"
          ./create_custom_dmg.sh \
            "$APP_BUNDLE" \
            "$DMG_FILE" \
            "${{ steps.version.outputs.version }}"

          # Submit DMG for notarization
          echo "Submitting DMG to Apple for notarization..."
          xcrun notarytool submit "$DMG_FILE" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait \
            --timeout 30m

          if [ $? -eq 0 ]; then
            echo "✓ DMG notarization successful"

            # Staple the notarization ticket to the DMG
            echo "Stapling notarization ticket to DMG..."
            xcrun stapler staple "$DMG_FILE"

            # Verify stapling
            xcrun stapler validate "$DMG_FILE"
          else
            echo "✗ DMG notarization failed"
            exit 1
          fi

          echo "::endgroup::"

          # Recreate .app.zip with notarized app
          cd "$BUNDLE_DIR/macos"
          rm -f "$ARTIFACTS_DIR/Porua-${{ steps.version.outputs.version }}-${{ matrix.arch }}.app.zip"
          zip -qr "$ARTIFACTS_DIR/Porua-${{ steps.version.outputs.version }}-${{ matrix.arch }}.app.zip" Porua.app

          echo "✓ All artifacts signed, notarized, and stapled"

      - name: Prepare artifacts (Windows)
        if: matrix.platform == 'windows-latest'
        shell: bash
        run: |
          ARTIFACTS_DIR="${GITHUB_WORKSPACE}/wrapper/src-tauri/target/artifacts"
          BUNDLE_DIR="${GITHUB_WORKSPACE}/wrapper/src-tauri/target/${{ matrix.target }}/release/bundle"

          mkdir -p "$ARTIFACTS_DIR"

          # Copy MSI if it exists
          if [ -d "$BUNDLE_DIR/msi" ]; then
            echo "Found MSI installer"
            ls -la "$BUNDLE_DIR/msi/"
            cp "$BUNDLE_DIR/msi"/*.msi "$ARTIFACTS_DIR/Porua-${{ steps.version.outputs.version }}-windows-${{ matrix.arch }}.msi"
          else
            echo "Warning: MSI installer not found"
          fi

          # Copy NSIS installer if it exists
          if [ -d "$BUNDLE_DIR/nsis" ]; then
            echo "Found NSIS installer"
            ls -la "$BUNDLE_DIR/nsis/"
            cp "$BUNDLE_DIR/nsis"/*.exe "$ARTIFACTS_DIR/Porua-${{ steps.version.outputs.version }}-windows-${{ matrix.arch }}.exe"
          else
            echo "Warning: NSIS installer not found"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: porua-desktop-${{ matrix.platform }}-${{ matrix.arch }}
          path: wrapper/src-tauri/target/artifacts/*

  create-release:
    needs: build-desktop
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#server-v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "desktop_tag=desktop-v$VERSION" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create desktop release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.desktop_tag }}
          name: Porua Desktop ${{ steps.version.outputs.version }}
          body: |
            Desktop wrapper application for Porua TTS Server.

            ## Downloads

            ### macOS
            - **Apple Silicon (M1/M2/M3)**: `Porua-${{ steps.version.outputs.version }}-arm64.dmg` or `Porua-${{ steps.version.outputs.version }}-arm64.app.zip`
            - **Intel**: `Porua-${{ steps.version.outputs.version }}-x64.dmg` or `Porua-${{ steps.version.outputs.version }}-x64.app.zip`

            ### Windows
            - **64-bit MSI**: `Porua-${{ steps.version.outputs.version }}-windows-x64.msi`
            - **64-bit EXE**: `Porua-${{ steps.version.outputs.version }}-windows-x64.exe`

            ## Installation

            ### macOS
            1. Download the appropriate DMG file for your Mac
            2. Open the DMG file
            3. Drag Porua to your Applications folder
            4. Right-click and select "Open" on first launch (due to macOS security)

            Alternatively, download the .app.zip file, extract it, and move to Applications.

            ### Windows
            1. Download the MSI or EXE installer
            2. Run the installer
            3. Follow the installation prompts

            ---
            *Built from server release tag: `server-v${{ steps.version.outputs.version }}`*
          files: |
            artifacts/**/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
